USE CAMPDB;

DROP TABLE IF EXISTS reservation;

DROP TABLE IF EXISTS image;

DROP TABLE IF EXISTS review;

DROP TABLE IF EXISTS home;

DROP TABLE IF EXISTS facility;

DROP TABLE IF EXISTS notice;

DROP TABLE IF EXISTS book;

DROP TABLE IF EXISTS user;

DROP TABLE IF EXISTS payment;

DROP TABLE IF EXISTS site;

DROP TABLE IF EXISTS zone;

DROP TABLE IF EXISTS schedule;

DROP TABLE IF EXISTS admin;

DROP TABLE IF EXISTS company;

CREATE TABLE `notice` (
   `NOTICE_CODE` INT NOT NULL AUTO_INCREMENT,
   `ADMIN_CODE` INT NOT NULL,
   `NOTICE_LEVEL` INT NULL,
   `NOTICE_TITLE` VARCHAR(100) NULL,
   `NOTICE_WRITEDATE` DATETIME NULL DEFAULT NOW(),
   `NOTICE_CONTENT` VARCHAR(500) NULL,
   PRIMARY KEY (NOTICE_CODE)
);

CREATE TABLE `site` (
   `SITE_CODE` INT NOT NULL AUTO_INCREMENT,
   `ZONE_CODE` INT NOT NULL,
   `SITE_NAME` VARCHAR(100) NULL,
   `SITE_PRICE` INT NULL,
   `SITE_CONTENT` LONGTEXT NULL,
   `SITE_STATE` INT NULL DEFAULT 1,
   PRIMARY KEY (SITE_CODE)
);

CREATE TABLE `home` (
   `HOME_CODE` INT NOT NULL AUTO_INCREMENT,
   `ADMIN_CODE` INT NOT NULL,
   `HOME_OWNER` VARCHAR(20) NULL,
   `HOME_CONTENT` LONGTEXT NOT NULL,
   `HOME_ADDRESS` VARCHAR(100) NULL,
   `HOME_LONGITUDE` DOUBLE NULL,
   `HOME_LATITUDE` DOUBLE NULL,
   `HOME_HTTPS` VARCHAR(50) NULL,
   `HOME_TELL` VARCHAR(20) NULL,
   `HOME_IMAGE` VARCHAR(50) NULL,
   PRIMARY KEY (HOME_CODE)
);

CREATE TABLE `facility` (
   `FACILITY_CODE` INT NOT NULL AUTO_INCREMENT,
   `ADMIN_CODE` INT NOT NULL,
   `FACILITY_NAME` VARCHAR(100) NULL,
   `FACILITY_CONTENT` LONGTEXT NULL,
   PRIMARY KEY (FACILITY_CODE)
);

CREATE TABLE `book` (
   `BOOK_CODE` INT NOT NULL AUTO_INCREMENT,
   `SITE_CODE` INT NOT NULL,
   `USER_CODE` INT NOT NULL,
   `MERCHANT_UID` VARCHAR(30) NOT NULL,
   `BOOK_MEMBER` INT NOT NULL,
   `BOOK_CHECKIN` VARCHAR(15) NOT NULL,
   `BOOK_CHECKOUT` VARCHAR(15) NOT NULL,
   `BOOK_WRITEDATE` DATETIME NULL DEFAULT NOW(),
   `BOOK_PRICE` INT NOT NULL,
   `BOOK_CAR_NUMBER` VARCHAR(20) NULL,
   `BOOK_STATE` INT NULL DEFAULT 1,
   `BOOK_DETIALS` VARCHAR(500) NULL,
   PRIMARY KEY (BOOK_CODE)
);

CREATE TABLE `zone` (
   `ZONE_CODE` INT NOT NULL AUTO_INCREMENT,
   `ADMIN_CODE` INT NOT NULL,
   `ZONE_NAME` VARCHAR(30) NOT NULL,
   `ZONE_CONTENT` LONGTEXT NULL,
   `ZONE_STATE` INT NULL DEFAULT 1,
   PRIMARY KEY (ZONE_CODE)
);

CREATE TABLE `user` (
   `USER_CODE` INT NOT NULL AUTO_INCREMENT,
   `USER_ID` VARCHAR(20) NOT NULL,
   `USER_PASSWORD` VARCHAR(1000) NULL,
   `USER_NAME` VARCHAR(20) NULL,
   `USER_BIRTHDAY` VARCHAR(10) NULL,
   `USER_TEL` VARCHAR(20) NULL,
   PRIMARY KEY (USER_CODE)
);

CREATE TABLE `company` (
   `COMPANY_CODE` INT NOT NULL AUTO_INCREMENT,
   `COMPANY_NAME` VARCHAR(20) NOT NULL,
   `COMPANY_LOGO1` VARCHAR(50) NOT NULL,
   `COMPANY_LOGO2` VARCHAR(50) NOT NULL,
   PRIMARY KEY (COMPANY_CODE)
);

CREATE TABLE `admin` (
   `ADMIN_CODE` INT NOT NULL AUTO_INCREMENT,
   `COMPANY_CODE` INT NOT NULL,
   `ADMIN_ID` VARCHAR(20) NOT NULL,
   `ADMIN_PASSWORD` VARCHAR(1000) NOT NULL,
   PRIMARY KEY (ADMIN_CODE)
);

CREATE TABLE `payment` (
   `MERCHANT_UID` VARCHAR(30) NOT NULL,
   `PAY_METHOD` VARCHAR(30) NOT NULL,
   `IMP_UID` VARCHAR(30) NOT NULL,
   PRIMARY KEY (MERCHANT_UID)
);

CREATE TABLE `review` (
   `REVIEW_CODE` INT NOT NULL AUTO_INCREMENT,
   `BOOK_CODE` INT NOT NULL,
   `REVIEW_CONTENT` LONGTEXT NULL,
   `REVIEW_SCORE` INT NULL,
   PRIMARY KEY (REVIEW_CODE)
);

CREATE TABLE `schedule` (
   `SCHEDULE_CODE` INT NOT NULL AUTO_INCREMENT,
   `ADMIN_CODE` INT NOT NULL,
   `SCHEDULE_DATE` DATE NOT NULL,
   `SCHEDULE_NAME` VARCHAR(20) NOT NULL,
   PRIMARY KEY (SCHEDULE_CODE)
);

CREATE TABLE `image` (
   `IMAGE_CODE` INT NOT NULL AUTO_INCREMENT,
   `COMPANY_CODE` INT NOT NULL,
   `ZONE_CODE` INT NULL,
   `SITE_CODE` INT NULL,
   `HOME_CODE` INT NULL,
   `FACILITY_CODE` INT NULL,
   `IMAGE_FILE` VARCHAR(50) NOT NULL,
   PRIMARY KEY (IMAGE_CODE)
);

CREATE TABLE `reservation` (
   `RESERVATION_CODE` INT NOT NULL AUTO_INCREMENT,
   `BOOK_CODE` INT NOT NULL,
   `RESERVATION_DATE` DATE NOT NULL,
   PRIMARY KEY (RESERVATION_CODE)
);

ALTER TABLE `notice` ADD CONSTRAINT `FK_ADMIN_TO_NOTICE_1` FOREIGN KEY ( `ADMIN_CODE` ) REFERENCES `admin` ( `ADMIN_CODE` );

ALTER TABLE `site` ADD CONSTRAINT `FK_ZONE_TO_SITE_1` FOREIGN KEY ( `ZONE_CODE` ) REFERENCES `zone` ( `ZONE_CODE` );

ALTER TABLE `home` ADD CONSTRAINT `FK_ADMIN_TO_HOME_1` FOREIGN KEY ( `ADMIN_CODE` ) REFERENCES `admin` ( `ADMIN_CODE` );

ALTER TABLE `facility` ADD CONSTRAINT `FK_ADMIN_TO_FACILITY_1` FOREIGN KEY ( `ADMIN_CODE` ) REFERENCES `admin` ( `ADMIN_CODE` );

ALTER TABLE `book` ADD CONSTRAINT `FK_SITE_TO_BOOK_1` FOREIGN KEY ( `SITE_CODE` ) REFERENCES `site` ( `SITE_CODE` );

ALTER TABLE `book` ADD CONSTRAINT `FK_USER_TO_BOOK_1` FOREIGN KEY ( `USER_CODE` ) REFERENCES `user` ( `USER_CODE` );

ALTER TABLE `book` ADD CONSTRAINT `FK_PAYMENT_TO_BOOK_1` FOREIGN KEY ( `MERCHANT_UID` ) REFERENCES `payment` ( `MERCHANT_UID` );

ALTER TABLE `zone` ADD CONSTRAINT `FK_ADMIN_TO_ZONE_1` FOREIGN KEY ( `ADMIN_CODE` ) REFERENCES `admin` ( `ADMIN_CODE` );

ALTER TABLE `admin` ADD CONSTRAINT `FK_COMPANY_TO_ADMIN_1` FOREIGN KEY ( `COMPANY_CODE` ) REFERENCES `company` ( `COMPANY_CODE` );

ALTER TABLE `review` ADD CONSTRAINT `FK_BOOK_TO_REVIEW_1` FOREIGN KEY ( `BOOK_CODE` ) REFERENCES `book` ( `BOOK_CODE` );

ALTER TABLE `schedule` ADD CONSTRAINT `FK_ADMIN_TO_SCHEDULE_1` FOREIGN KEY ( `ADMIN_CODE` ) REFERENCES `admin` ( `ADMIN_CODE` );

ALTER TABLE `image` ADD CONSTRAINT `FK_COMPANY_TO_IMAGE_1` FOREIGN KEY ( `COMPANY_CODE` ) REFERENCES `company` ( `COMPANY_CODE` );

ALTER TABLE `image` ADD CONSTRAINT `FK_ZONE_TO_IMAGE_1` FOREIGN KEY ( `ZONE_CODE` ) REFERENCES `zone` ( `ZONE_CODE` );

ALTER TABLE `image` ADD CONSTRAINT `FK_SITE_TO_IMAGE_1` FOREIGN KEY ( `SITE_CODE` ) REFERENCES `site` ( `SITE_CODE` );

ALTER TABLE `image` ADD CONSTRAINT `FK_HOME_TO_IMAGE_1` FOREIGN KEY ( `HOME_CODE` ) REFERENCES `home` ( `HOME_CODE` );

ALTER TABLE `image` ADD CONSTRAINT `FK_FACILITY_TO_IMAGE_1` FOREIGN KEY ( `FACILITY_CODE` ) REFERENCES `facility` ( `FACILITY_CODE` );

ALTER TABLE `reservation` ADD CONSTRAINT `FK_BOOK_TO_RESERVATION_1` FOREIGN KEY ( `BOOK_CODE` ) REFERENCES `book` ( `BOOK_CODE` );